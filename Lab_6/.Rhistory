# mat=matrix(data = 1,nrow = dim(H)[1],ncol = dim(H)[2])
# diag(mat)=diag(solve(model$Hessian))
ITER=1000
library(MASS)
sim_mat=mvrnorm(n=ITER, mu=as.numeric(summed_model$coefficients),
Sigma=H)
martial=c("1","2","3","4","5")
pie0=matrix(data = NA,ncol = length(martial),nrow = ITER)
pie1=matrix(data = NA,ncol = length(martial),nrow = ITER)
for (k in 1:ITER)
{
B=matrix(data = sim_mat[k,],nrow = 4)
B=as.matrix(rbind(0,B))
X_0=as.matrix(cbind(1,newdata_1))
X_1=as.matrix(cbind(1,newdata_2))
deno_0=sum(exp(X_0%*%t(B)))
deno_1=sum(exp(X_1%*%t(B)))
for (j in 1:ncol(pie0))
{
pie0[k,j]=exp(X_0%*%B[j,])/deno_0
pie1[k,j]=exp(X_1%*%B[j,])/deno_1
}
}
boxplot(pie0)
boxplot(pie1)
#################################################################
# Multinomial
# Lab 5, 29.9.15
# Quant III, Elad Zippory
#################################################################
rm(list=ls())
set.seed(123)
library(MASS)
library(nnet)
library(ggplot2)
library("reshape2")
load(file = "united_fmly_2012.rda")
attach(fmly2012)
# 1 Married
# 2 Widowed
# 3 Divorced
# 4 Separated
# 5 Never married
table(marital1)
fmly2012$sex_ref=as.numeric(sex_ref)
form=as.formula(marital1~sex_ref+age_ref)
model=multinom(formula = form,data = fmly2012,Hess = T,maxit=1000)
summary(model)
summed_model=summary(model)
dim(summed_model$coefficients)
dim(summed_model$standard.errors)
# pretty trivial to get predicted probabilites:
# by category:
par(mfrow=c(1,2))
newdata_1=data.frame(sex_ref=1,age_ref=median(age_ref))
plot(x = 1:length(unique(marital1)),
y=predict(object = model,newdata = newdata_1,type="probs"),
type="h",ylab = "pie",xlab="1",ylim=c(0,.7))
newdata_2=data.frame(sex_ref=2,age_ref=median(age_ref))
plot(x = 1:length(unique(marital1)),
y=predict(object = model,newdata = newdata_2,type="probs"),
type="h",ylab = "pie",xlab="2",ylim=c(0,.7))
par(mfrow=c(1,1))
# by age and gender, with ggplot
# newdata <- rbind(data.frame(sex_ref=1,age_ref=min(age_ref):max(age_ref)),
#                  data.frame(sex_ref=0,age_ref=min(age_ref):max(age_ref)))
# pred <- predict(object = model,newdata = newdata,type="probs")
#
# data_melted <- melt(data=as.data.frame(cbind(newdata,pred)),measure.vars=3:7)
#
# ggplot(data=data_melted, aes(x=age_ref, y=value, group = variable, colour = as.factor(variable))) +
#     geom_line() + ylim(0, 1) + facet_wrap(~sex_ref)
# OH MY GOD PEOPLE START TO DIE AS THEY GET OLD AND MEN DIE FIRST!
# Insert "Science!" meme here.
matrix(sqrt(diag(solve(model$Hessian))),nrow = nrow(summed_model$standard.errors),byrow = T)
summed_model$standard.errors
H=solve(model$Hessian)
ITER=1000
sim_mat=mvrnorm(n=ITER,
mu=as.numeric(summed_model$coefficients),
Sigma=H)
martial=c("1","2","3","4","5")
pie0=matrix(data = NA,ncol = length(martial),nrow = ITER)
pie1=matrix(data = NA,ncol = length(martial),nrow = ITER)
for (k in 1:ITER)
{
B=matrix(data = sim_mat[k,],nrow = 4)
B=as.matrix(rbind(0,B))
X_0=as.matrix(cbind(1,newdata_1))
X_1=as.matrix(cbind(1,newdata_2))
deno_0=sum(exp(X_0%*%t(B)))
deno_1=sum(exp(X_1%*%t(B)))
for (j in 1:ncol(pie0))
{
pie0[k,j]=exp(X_0%*%B[j,])/deno_0
pie1[k,j]=exp(X_1%*%B[j,])/deno_1
}
}
par(mfrow=c(1,2))
boxplot(pie0)
boxplot(pie1)
par(mfrow=c(1,1))
newdata <- rbind(data.frame(sex_ref=1,age_ref=min(age_ref):max(age_ref)),
data.frame(sex_ref=0,age_ref=min(age_ref):max(age_ref)))
pred <- predict(object = model,newdata = newdata,type="probs")
data_melted <- melt(data=as.data.frame(cbind(newdata,pred)),measure.vars=3:7)
ggplot(data=data_melted, aes(x=age_ref, y=value, group = variable, colour = as.factor(variable))) +
geom_line() + ylim(0, 1) + facet_wrap(~sex_ref)
for (k in 1:ITER)
{
B=matrix(data = sim_mat[k,],nrow = 4)
B=as.matrix(rbind(0,B))
X_0=as.matrix(cbind(1,newdata_1))
X_1=as.matrix(cbind(1,newdata_2))
deno_0=sum(exp(X_0%*%t(B)))
deno_1=sum(exp(X_1%*%t(B)))
for (j in 1:ncol(pie0))
{
pie0[k,j]=exp(X_0%*%B[j,])/deno_0
pie1[k,j]=exp(X_1%*%B[j,])/deno_1
}
}
par(mfrow=c(1,2))
boxplot(pie0)
boxplot(pie1)
par(mfrow=c(1,1))
#################################################################
# Multinomial
# Lab 5, 29.9.15
# Quant III, Elad Zippory
#################################################################
rm(list=ls())
set.seed(123)
library(MASS)
library(nnet)
library(ggplot2)
library("reshape2")
load(file = "united_fmly_2012.rda")
attach(fmly2012)
# 1 Married
# 2 Widowed
# 3 Divorced
# 4 Separated
# 5 Never married
table(marital1)
fmly2012$sex_ref=as.numeric(sex_ref)
form=as.formula(marital1~sex_ref+age_ref)
model=multinom(formula = form,data = fmly2012,Hess = T,maxit=1000)
summary(model)
summed_model=summary(model)
dim(summed_model$coefficients)
dim(summed_model$standard.errors)
# pretty trivial to get predicted probabilites:
# by category:
par(mfrow=c(1,2))
newdata_1=data.frame(sex_ref=1,age_ref=median(age_ref))
plot(x = 1:length(unique(marital1)),
y=predict(object = model,newdata = newdata_1,type="probs"),
type="h",ylab = "pie",xlab="1",ylim=c(0,.7))
newdata_2=data.frame(sex_ref=2,age_ref=median(age_ref))
plot(x = 1:length(unique(marital1)),
y=predict(object = model,newdata = newdata_2,type="probs"),
type="h",ylab = "pie",xlab="2",ylim=c(0,.7))
par(mfrow=c(1,1))
# by age and gender, with ggplot
newdata <- rbind(data.frame(sex_ref=1,age_ref=min(age_ref):max(age_ref)),
data.frame(sex_ref=0,age_ref=min(age_ref):max(age_ref)))
pred <- predict(object = model,newdata = newdata,type="probs")
data_melted <- melt(data=as.data.frame(cbind(newdata,pred)),measure.vars=3:7)
ggplot(data=data_melted, aes(x=age_ref, y=value, group = variable, colour = as.factor(variable))) +
geom_line() + ylim(0, 1) + facet_wrap(~sex_ref)
# OH MY GOD PEOPLE START TO DIE AS THEY GET OLD AND MEN DIE FIRST!
# Insert "Science!" meme here.
# but how certain are we?
# reminder...
matrix(sqrt(diag(solve(model$Hessian))),nrow = nrow(summed_model$standard.errors),byrow = T)
summed_model$standard.errors
# varcov matrix for simulations:
H=solve(model$Hessian)
ITER=1000
sim_mat=mvrnorm(n=ITER,
mu=as.numeric(summed_model$coefficients),
Sigma=H)
martial=c("1","2","3","4","5")
pie0=matrix(data = NA,ncol = length(martial),nrow = ITER)
pie1=matrix(data = NA,ncol = length(martial),nrow = ITER)
for (k in 1:ITER)
{
B=matrix(data = sim_mat[k,],nrow = 4)
B=as.matrix(rbind(0,B))
X_0=as.matrix(cbind(1,newdata_1))
X_1=as.matrix(cbind(1,newdata_2))
deno_0=sum(exp(X_0%*%t(B)))
deno_1=sum(exp(X_1%*%t(B)))
for (j in 1:ncol(pie0))
{
pie0[k,j]=exp(X_0%*%B[j,])/deno_0
pie1[k,j]=exp(X_1%*%B[j,])/deno_1
}
}
par(mfrow=c(1,2))
boxplot(pie0)
boxplot(pie1)
par(mfrow=c(1,1))
# Lab task: simulate the standard errors by age.
sum(exp(X_0%*%t(B)))
X_0
B
pie0
colMeans(pie0)
newdata_1
newdata_2
predict(object = model,newdata = newdata_2,type="probs")
predict(object = model,newdata = newdata_1,type="probs")
ITER=10000
sim_mat=mvrnorm(n=ITER,
mu=as.numeric(summed_model$coefficients),
Sigma=H)
martial=c("1","2","3","4","5")
pie0=matrix(data = NA,ncol = length(martial),nrow = ITER)
pie1=matrix(data = NA,ncol = length(martial),nrow = ITER)
for (k in 1:ITER)
{
B=matrix(data = sim_mat[k,],nrow = 4)
B=as.matrix(rbind(0,B))
X_0=as.matrix(cbind(1,newdata_1))
X_1=as.matrix(cbind(1,newdata_2))
deno_0=sum(exp(X_0%*%t(B)))
deno_1=sum(exp(X_1%*%t(B)))
for (j in 1:ncol(pie0))
{
pie0[k,j]=exp(X_0%*%B[j,])/deno_0
pie1[k,j]=exp(X_1%*%B[j,])/deno_1
}
}
boxplot(pie0)
boxplot(pie1)
par(mfrow=c(1,2))
boxplot(pie0)
boxplot(pie1)
par(mfrow=c(1,1))
colMeans(pie0)
predict(object = model,newdata = newdata_1,type="probs")
predict(object = model,newdata = newdata_2,type="probs")
betas=sim_mat[1,]
betas
levs=4;x=newdata_1
betas=matrix(data = sim_mat[1,],nrow = levs)
betas
summed_model$coefficients
levs=4;x=newdata_1
betas=matrix(data = sim_mat[1,],nrow = levs)
betas
dim(x)
x
x <- cbind(1,x)
x
dim(x)
dim(betas)
x%*%t(betas)
is.matrix(betas)
is.matrix(x)
levs=4;x=newdata_1
betas=matrix(data = sim_mat[1,],nrow = levs)
x <- as.matrix(cbind(1,x))
dim(x)
dim(betas)
is.matrix(betas)
is.matrix(x)
x%*%t(betas)
betas%*%t(x)
sum(x%*%t(betas))
sum(betas%*%t(x))
sum(exp(x%*%t(betas)))
dim(x)
dim(betas)
betas
sim_mat[1,]
betas
summed_model$coefficients
deno=1+sum(exp(x%*%t(betas)))
deno
sum(exp(x%*%t(betas)))
betas <- as.matrix(rbind(0,betas))
betas
sum(exp(x%*%t(betas)))
deno
betas
exp(x%*%t(betas[1,]))
betas[1,]
x
exp(x%*%betas[1,])
exp(x%*%betas)
exp(x%*%t(betas))
apply(betas,MARGIN = 1,FUN = function(X) exp(x%*%X))
exp(x%*%t(betas))
exp(x%*%t(betas))/sum(exp(x%*%t(betas)))
?simulate
sim_mat
matrix(data = sim_mat[1,],nrow = levs)
betas=sim_mat[1,]
levs=4;x=newdata_1
betas=sim_mat[1,]
x <- as.matrix(cbind(1,x))
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs)))
betas
apply(sim_mat, 1,get_prob_multinomial,levs=4,x=newdata_1)
get_prob_multinomial <- function(betas,x,levs){
# intercept..
x <- as.matrix(cbind(1,x))
# so we have one loop for all.
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs)))
exp(x%*%t(betas))/sum(exp(x%*%t(betas)))
}
apply(sim_mat, 1,get_prob_multinomial,levs=4,x=newdata_1)
ans <- apply(sim_mat, 1,get_prob_multinomial,levs=4,x=newdata_1)
str(ans)
rowMeans(ans)
predict(object = model,newdata = newdata_1,type="probs")
predict(object = model,newdata = newdata_2,type="probs")
ITER=100000
ans <- apply(sim_mat, 1,get_prob_multinomial,levs=4,x=newdata_1)
rowMeans(ans)
ITER=100000
sim_mat=mvrnorm(n=ITER, mu=as.numeric(summed_model$coefficients),Sigma=H)
get_prob_multinomial <- function(betas,x,levs){
# intercept..
x <- as.matrix(cbind(1,x))
# so we have one loop for all.
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs)))
exp(x%*%t(betas))/sum(exp(x%*%t(betas)))
}
ans <- apply(sim_mat, 1,get_prob_multinomial,levs=4,x=newdata_1)
rowMeans(ans)
predict(object = model,newdata = newdata_1,type="probs")
newdata_1
dim(sim_mat)
sim_mat[1,]
matrix(data = sim_mat[1,],nrow = 4)
sim_mat[1,]
matrix(data = sim_mat[1,],nrow = 4,byrow = T)
matrix(data = sim_mat[1,],nrow = 4,byrow = T)
sim_mat[1,]
ITER=10000
sim_mat=mvrnorm(n=ITER, mu=as.numeric(summed_model$coefficients),Sigma=H)
get_prob_multinomial <- function(betas,x,levs){
# intercept..
x <- as.matrix(cbind(1,x))
# so we have one treatment for all:
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs,byrow = T)))
exp(x%*%t(betas))/sum(exp(x%*%t(betas)))
}
ans <- apply(sim_mat, 1,get_prob_multinomial,levs=4,x=newdata_1)
rowMeans(ans)
round(rowMeans(ans),4)
round(rowMeans(ans),10)
predict(object = model,newdata = newdata_1,type="probs")
levs=4;x=newdata_1
betas=sim_mat[1,]
x <- as.matrix(cbind(1,x))
x
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs,byrow = T)))
betas
sim_mat[1,]
betas=sim_mat[1,]
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs,byrow = T)))
betas
exp(x%*%t(betas))
sum(exp(x%*%t(betas)))
exp(x%*%t(betas))/sum(exp(x%*%t(betas)))
x
t(betas)
x%*%t(betas)
sum(exp(x%*%t(betas)))
betas=sim_mat[1,]
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs,byrow = T)))
betas
sim_mat[1,]
betas
x
x%*%t(betas)
betas%*%t(x)
x
betas
t(betas)
x
x%*%t(betas)
exp(x%*%t(betas))
betas=sim_mat[2,]
levs=4;x=newdata_1
betas=sim_mat[2,]
x <- as.matrix(cbind(1,x))
# so we have one treatment for all:
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs,byrow = T)))
exp(x%*%t(betas))/sum(exp(x%*%t(betas)))
x%*%t(betas)
exp(x%*%t(betas))
exp(30)
exp(30.8)
sim_mat=mvrnorm(n=ITER, mu=as.numeric(summed_model$coefficients),Sigma=H)
summed_model$coefficients
rowMeans(sim_mat)
dim(sim_mat)
colMeans(sim_mat)
cbind(colMeans(sim_mat),as.numeric(summed_model$coefficients))
levs=4;x=newdata_1
betas=sim_mat[2,]
get_prob_multinomial <- function(betas,x,levs){
# intercept..
x <- as.matrix(cbind(1,x))
# so we have one treatment for all:
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs,byrow = T)))
exp(x%*%t(betas))/sum(exp(x%*%t(betas)))
}
dim(sim_mat)
ans <- apply(sim_mat, 1,get_prob_multinomial,levs=4,x=newdata_1)
str(ans)
round(rowMeans(ans),10)
predict(object = model,newdata = newdata_1,type="probs")
as.numeric(summed_model$coefficients)
# betas=as.numeric(summed_model$coefficients)
levs=4;x=newdata_1
betas=as.numeric(summed_model$coefficients)
betas
x <- as.matrix(cbind(1,x))
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs,byrow = T)))
betas
summed_model$coefficients
betas=as.numeric(summed_model$coefficients)
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs,byrow = T)))
betas
betas=as.numeric(summed_model$coefficients)
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs)))
betas
summed_model$coefficients
get_prob_multinomial <- function(betas,x,levs){
# intercept..
x <- as.matrix(cbind(1,x))
# so we have one treatment for all:
betas <- as.matrix(rbind(0,matrix(data = betas,nrow = levs)))
exp(x%*%t(betas))/sum(exp(x%*%t(betas)))
}
ans <- apply(sim_mat, 1,get_prob_multinomial,levs=4,x=newdata_1)
round(rowMeans(ans),10)
predict(object = model,newdata = newdata_1,type="probs")
get_prob_multinomial(betas = as.numeric(summed_model$coefficients),levs=4,x=newdata_1)
rm(list=ls())
set.seed(123)
library(foreign)
data <- read.dta("soccer_data.dta")
summary(
poisson <- glm(yellow_card ~ civwar + age, family = "poisson", data = data)
)
poisson
library(MASS)
summary(
negbin <- glm.nb(yellow_card ~ civwar + age, data = data)
)
par(mfrow=c(1,2))
## POISSON
betas <- mvrnorm(n=1000, mu=poisson$coefficients,
Sigma=summary(poisson)$cov.unscaled)
age <- 18:40
marg <- matrix(NA, nrow=1000, ncol=length(age))
for (i in 1:1000){
for (a in 1:length(age)){
marg[i,a] <- betas[i,3] * exp(c(1, 0, a) %*% betas[i,])
}
}
marg <- apply(marg, 2, function(x)
c(mean(x), quantile(x, c(.025, .975))))
plot(age, marg[1,], type="l",
xlab="Age", ylab="PR(Yellow Card)", ylim=c(0.02, 0.07))
lines(age, marg[2,], col="grey")
lines(age, marg[3,], col="grey")
betas <- mvrnorm(n=1000, mu=negbin$coefficients,
Sigma=summary(negbin)$cov.unscaled)
age <- 18:40
marg <- matrix(NA, nrow=1000, ncol=length(age))
for (i in 1:1000){
for (a in 1:length(age)){
marg[i,a] <- betas[i,3] * exp(c(1, 0, a) %*% betas[i,])
}
}
marg <- apply(marg, 2, function(x)
c(mean(x), quantile(x, c(.025, .975))))
plot(age, marg[1,], type="l",
xlab="Age", ylab="", ylim=c(0.02, 0.07))
lines(age, marg[2,], col="grey")
lines(age, marg[3,], col="grey")
par(mfrow=c(1,1))
hist(data$yellow_card)
betas <- mvrnorm(n=1000, mu=poisson$coefficients,
Sigma=summary(poisson)$cov.unscaled)
zeros=numeric(1000)
for (i in 1:1000)
{
xb=cbind(1,data$civwar,data$age)%*%betas[i,]
zeros[i]=sum(rpois(n = length(xb),lambda = exp(xb))==0)
}
plot(density(zeros),xlim = c(400,2000))
abline(v = sum(data$yellow_card==0))
betas <- mvrnorm(n=1000, mu=negbin$coefficients,
Sigma=summary(negbin)$cov.unscaled)
zeros=numeric(1000)
for (i in 1:1000)
{
xb=cbind(1,data$civwar,data$age)%*%betas[i,]
zeros[i]=sum(rnegbin(n = length(xb),mu = exp(xb),theta = summary(negbin)$theta)==0)
}
plot(density(zeros),xlim = c(1000,2000))
abline(v = sum(data$yellow_card==0))
