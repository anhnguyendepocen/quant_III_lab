rm(list=ls())
library("lattice")
load(file = "pca_kmeans.rda")
X=as.matrix(std_fulldf)
Sigma=cor(X)
V=eigen(Sigma)[[2]]
W=X%*%V
round(eigen(Sigma)[[1]],2)
xyplot(W[,2]~W[,1],group=foodclass,auto.key=T)
clusters=kmeans(X,centers=4)
xyplot(W[,2]~W[,1],group=clusters$cluster,auto.key=T)
install.packages(c("lmtest","urca","car"))
rm(list=ls())
set.seed(123)
# generating simulated data
t <- 200
x <- runif(t, -1, 1)
e <- rnorm(t, 0, 1)
beta <- 3
y <- beta * x + e
plot(ts(y))
abline(h = 0)
summary(ols <- lm(y ~ x))
plot(ts(ols$residuals))
abline(h = 0)
library(car)
durbinWatsonTest(ols, max.lag=1)
library(lmtest)
bgtest(ols)
dwtest(ols)
rm(list=ls())
set.seed(777)
rm(list=ls())
set.seed(777)
t <- 200
## now using 'ts' function (this will make computing lags easier)
x <- ts(runif(t, -1, 1))
l.x <- lag(x, -1)
e <- ts(rnorm(t, 0, 1))
beta <- 3
gamma <- 1
y <- beta * x + gamma * l.x + e
d <- ts.union(y, x, l.x, e)
plot(d)
summary(ols <- lm(y ~ x + l.x, data=d))
bgtest(ols)
summary(ols <- lm(y ~ x, data=d))
bgtest(ols)
rm(list=ls())
set.seed(444)
t <- 200
x <- ts(runif(t, -1, 1))
rho <- 0.9
# generating AR1 errors
nu <- ts(rnorm(t))
beta <- 3
y <- beta * x + nu
for (i in 2:t){ y[i] <- rho*y[i-1] + y[i] }
d <- ts.union(y, x, nu)
plot(d) ## what plots show serial correlation?
summary(ols <- lm(y ~ x, data=d))
library(lmtest)
dwtest(ols)
bgtest(ols)
l.y <- lag(y, -1)
d <- ts.union(y, x, l.y, nu)
summary(ols_lagged <- lm(y ~ l.y + x, data=d))
bgtest(ols_lagged)
rm(list=ls())
set.seed(333)
t <- 500
x <- rnorm(t)
for (i in 2:t){ x[i] <- x[i-1] + rnorm(1) } ## x is I(1)
y <- rnorm(t)
for (i in 2:t){ y[i] <- y[i-1] + rnorm(1) } ## y is also I(1)
library(urca)
summary(ur.df(x, type="drift", lags=0))
summary(ur.df(x, type="none", lags=0))
par(mfrow=c(1,2))
plot(y, type="l")
plot(x, type="l")
summary(lm(y ~ x))
summary(lm(y ~ x))
set.seed(123)
TT=c(100,500,1000,10000,100000)
for (t in TT)
{
x <- rnorm(t)
for (i in 2:t){ x[i] <- x[i-1] + rnorm(1) }
y <- rnorm(t)
for (i in 2:t){ y[i] <- y[i-1] + rnorm(1) }
print(summary(lm(y ~ x))$coefficients[2,3])
}
summary(lm(y ~ x)
)
summary(lm(y ~ x))
summary(lm(y ~ x))$coefficients
summary(lm(y ~ x))$coefficients[2,3]
