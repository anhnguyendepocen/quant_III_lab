child_care=bbydaypq,
education=educapq,
health=hlthinpq + medsrvpq + predrgpq + medsuppq
),]
mtbi_wide_global
mtbi_wide_global <- compute_wide_mtbi(global_list)
mtbi_wide_global <- mtbi_wide_global[,.(newid,cuid,
food_at_home=fdhomepq,
housing=rntxrppq+mrtintpq+proptxpq+mrpinspq,
transportation=gasmopq+vehfinpq+mainrppq+vehinspq+trnothpq,
utilities=ntlgaspq+elctrcpq+fuloilpq+othflspq+telephpq+watrpspq,
child_care=bbydaypq,
education=educapq,
health=hlthinpq + medsrvpq + predrgpq + medsuppq
),]
mtbi_wide_global <- mtbi_wide_global[,.(newid,
food_at_home=fdhomepq,
housing=rntxrppq+mrtintpq+proptxpq+mrpinspq,
transportation=gasmopq+vehfinpq+mainrppq+vehinspq+trnothpq,
utilities=ntlgaspq+elctrcpq+fuloilpq+othflspq+telephpq+watrpspq,
child_care=bbydaypq,
education=educapq,
health=hlthinpq + medsrvpq + predrgpq + medsuppq
),]
mtbi_wide_global
mtbi_wide_global <- compute_wide_mtbi(global_list)
mtbi_wide_global <- mtbi_wide_global[,.(newid,cuid=newid%/%10,
food_at_home=fdhomepq,
housing=rntxrppq+mrtintpq+proptxpq+mrpinspq,
transportation=gasmopq+vehfinpq+mainrppq+vehinspq+trnothpq,
utilities=ntlgaspq+elctrcpq+fuloilpq+othflspq+telephpq+watrpspq,
child_care=bbydaypq,
education=educapq,
health=hlthinpq + medsrvpq + predrgpq + medsuppq
),]
mtbi_wide_global
mtbi_wide_global[,num_intrw:=.N,by="cuid"]
mtbi_wide_global
hist(mtbi_wide_global$num_intrw)
mtbi_wide_global[num_intrw>1,cuid]
unique(mtbi_wide_global[num_intrw>1,cuid])
unique(mtbi_wide_global[num_intrw>2,cuid])
unique(mtbi_wide_global[num_intrw>1,cuid])
unique(mtbi_wide_global[num_intrw>2,cuid])
cuid <- unique(mtbi_wide_global[num_intrw>2,cuid])
mtbi_cuid <- unique(mtbi_wide_global[num_intrw>2,cuid])
mtbi_cuid[order(mtbi_cuid)]
load(paste("./ts_fmli/",file_fmli[i],sep=""))
fmli_holder <- data.table(get(unlist(strsplit(file_fmli[i],split = ".rda"))),key=c("newid"))
fmli_holder[,number_intrws:=.N,by="cuid"]
fmli_cuid <- unique(fmli_holder[num_intrw>2,cuid])
fmli_cuid <- unique(fmli_holder[num_intrws>2,cuid])
fmli_holder <- data.table(get(unlist(strsplit(file_fmli[i],split = ".rda"))),key=c("newid"))
fmli_holder[,number_intrws:=.N,by="cuid"]
fmli_cuid <- unique(fmli_holder[num_intrws>2,cuid])
fmli_cuid <- unique(fmli_holder[number_intrws>2,cuid])
fmli_cuid
fmli_cuid <- fmli_cuid[order(fmli_cuid)]
fmli_cuid
cbind(mtbi_cuid,fmli_cuid)
which(!fmli_cuid %in% mtbi_cuid)
which(!mtbi_cuid %in% fmli_cuid)
rm(list=ls())
library(caret)
library(foreach)
library(doParallel)
cl<-makeCluster(3)
registerDoParallel(cl)
getDoParRegistered()
getDoParWorkers()
rm(list=ls())
rm(list=ls())
library(caret)
# we are going to do some heavy lifting
library(foreach)
library(doParallel)
cl<-makeCluster(3)
registerDoParallel(cl)
getDoParRegistered()
getDoParWorkers()
setwd(dir="~/Dropbox/Work/Quant_AR/Q32015/Lab/Lab 10/")
load(file = "disc2012_w_order.rda")
setwd(dir="~/Dropbox/Work/Quant_AR/Q32015/Lab/Lab 10/")
load(file = "disc2012_w_order.rda")
d
db
names(db)
db=na.omit(db)
model=as.formula(log(budget)~
CCES_region+CCES_housing+NEW_race+CCES_educ+fam_size+
log(bar_gross_income)+martial_state+ref_age*fam_size+
CCES_housing*log(bar_gross_income)+
CCES_region*log(bar_gross_income)+
fam_size*log(bar_gross_income)+
I(fam_size^2)+I(log(bar_gross_income)^2)+
I(log(bar_gross_income)^3)+msa*log(bar_gross_income))
index_train=createDataPartition(y = db$budget,p = .5,list=F)
train=db[index_train,]
test=db[-index_train,]
fit_lasso=train(model,method = "lasso",data = train)
fit_lasso
fit_lasso=train(model,method = "lasso",data = train)
fit_lasso=train(model,method = "lasso",data = train)
rm(list=ls())
library(caret)
library(foreach)
library(doParallel)
cl<-makeCluster(3)
registerDoParallel(cl)
getDoParRegistered()
getDoParWorkers()
setwd(dir="~/Dropbox/Work/Quant_AR/Q32015/Lab/Lab 10/")
load(file = "disc2012_w_order.rda")
db=na.omit(db)
model=as.formula(log(budget)~
CCES_region+CCES_housing+NEW_race+CCES_educ+fam_size+
log(bar_gross_income)+martial_state+ref_age*fam_size+
CCES_housing*log(bar_gross_income)+
CCES_region*log(bar_gross_income)+
fam_size*log(bar_gross_income)+
I(fam_size^2)+I(log(bar_gross_income)^2)+
I(log(bar_gross_income)^3)+msa*log(bar_gross_income))
index_train=createDataPartition(y = db$budget,p = .5,list=F)
train=db[index_train,]
test=db[-index_train,]
fit_lasso=train(model,method = "lasso",data = train)
fit_lasso=train(model,method = "lasso",data = train,
metric = "Rsquared",maximize = T)
fitControl <- trainControl(method = "repeatedcv",number = 10,repeats = 3)
fit_lasso_RCV=train(model,method = "lasso",data = train,
trControl = fitControl,metric = "Rsquared",
maximize = T,tuneLength = 10)
lm(formula = model,data = train)
db
which(db==Inf)
which(db==-Inf)
db$budget==0
which(db$budget==0)
which(db$bar_net_income==0)
which(db$bar_gross_income==0)
which(db$bar_gross_income==0,arr.ind = T)
which(db$bar_gross_income==0)
db[which(db$bar_gross_income==0)]=NA
db$bar_gross_income[which(db$bar_gross_income==0)]=NA
index_train=createDataPartition(y = db$budget,p = .5,list=F)
train=db[index_train,]
test=db[-index_train,]
lm(formula = model,data = train)
fit_lasso=train(model,method = "lasso",data = train)
fit_lasso
fit_lasso=train(model,method = "lasso",data = train,
metric = "Rsquared",maximize = T)
fit_lasso
fit_lasso=train(model,method = "lasso",data = train,
metric = "Rsquared",maximize = T,tuneLength = 10)
fit_lasso
ggplot(fit_lasso) + theme(legend.position="top")
fitControl <- trainControl(method = "repeatedcv",number = 10,repeats = 3)
fit_lasso_RCV=train(model,method = "lasso",data = train,
trControl = fitControl,metric = "Rsquared",
maximize = T,tuneLength = 10)
fit_lasso_RCV
ggplot(fit_lasso_RCV) + theme(legend.position="top")
results_lasso=predict(fit_lasso,newdata = test)
RMSE(results_lasso,log(test$budget))
results_lasso
log(test$budget)
results_lasso=predict(fit_lasso,newdata = test)
RMSE(results_lasso,log(test$budget))
rm(list=ls())
# just like the curse of dimensionality,
# there is the curse of machine learning implementations.
# go for reputation above all. caret is made by phizer...
# install.packages("caret")
rm(list=ls())
library(caret)
# we are going to do some heavy lifting
library(foreach)
library(doParallel)
cl<-makeCluster(3)
registerDoParallel(cl)
getDoParRegistered()
getDoParWorkers()
setwd(dir="~/Dropbox/Work/Quant_AR/Q32015/Lab/Lab 10/")
load(file = "disc2012_w_order.rda")
db=na.omit(db)
model=as.formula(log(budget)~
CCES_region+CCES_housing+NEW_race+CCES_educ+fam_size+
log(bar_gross_income)+martial_state+ref_age*fam_size+
CCES_housing*log(bar_gross_income)+
CCES_region*log(bar_gross_income)+
fam_size*log(bar_gross_income)+
I(fam_size^2)+I(log(bar_gross_income)^2)+
I(log(bar_gross_income)^3)+msa*log(bar_gross_income))
db$bar_gross_income[which(db$bar_gross_income==0)]=NA
index_train=createDataPartition(y = db$budget,p = .5,list=F)
train=db[index_train,]
test=db[-index_train,]
rm(list=ls())
setwd(dir="~/Dropbox/Work/Quant_AR/Q32015/Lab/Lab 10/")
load(file = "disc2012_w_order.rda")
model=as.formula(log(budget)~
CCES_region+CCES_housing+NEW_race+CCES_educ+fam_size+
log(bar_gross_income)+martial_state+ref_age*fam_size+
CCES_housing*log(bar_gross_income)+
CCES_region*log(bar_gross_income)+
fam_size*log(bar_gross_income)+
I(fam_size^2)+I(log(bar_gross_income)^2)+
I(log(bar_gross_income)^3)+msa*log(bar_gross_income))
db$bar_gross_income[which(db$bar_gross_income==0)]=NA
db=na.omit(db)
#
index_train=createDataPartition(y = db$budget,p = .5,list=F)
train=db[index_train,]
test=db[-index_train,]
fit_lasso=train(model,method = "lasso",data = train)
fit_lasso
fit_lasso=train(model,method = "lasso",data = train,
metric = "Rsquared",maximize = T,tuneLength = 10)
results_lasso=predict(fit_lasso,newdata = test)
RMSE(results_lasso,log(test$budget))
fit_ridge=train(model,method = "ridge",data = train)
results_ridge=predict(fit_ridge,newdata = test)
RMSE(results_ridge,log(test$budget))
model=as.formula(budget~CCES_housing+fam_size+bar_gross_income+ref_age+msa)
index_train=createDataPartition(y = db$budget,p = .1,list=F)
train=db[index_train,]
test=db[-index_train,]
load(file = "kernel_results.rda")
fit_kernel_poly
fit_kernel
grid=expand.grid(lamda=seq(.01,1000,by=))
grid
grid=expand.grid(degree=c(1,2,3),lambda=c(1,5,10,15))
fit_kernelgrid=train(
model,method = "krlsPoly",data = train,tuneGrid = grid)
ggplot(fit_kernelgrid) + theme(legend.position="top")
rm(list=ls())
library(pscl)
library(rstan)
setwd(dir="~/Dropbox/Work/Quant_AR/Q32015/Lab/Lab 10/")
load("lab13_senate_rc.rda")
rc <- dropRollCall(rc, dropList=list(codes = "notInLegis", lop = 0))
stan.code <- '
data {
int<lower=1> J; // number of legislators
int<lower=1> K; // number of bills
int<lower=1> N; // number of observations
int<lower=1,upper=J> j[N]; // legislator for observation n
int<lower=1,upper=K> k[N]; // bill for observation n
int<lower=0,upper=1> y[N]; // vote of observation n
}
parameters {
real alpha[K];
real beta[K];
real theta[J];
}
model {
alpha ~ normal(0, 25);
beta ~ normal(0, 25);
theta ~ normal(0, 1);
for (n in 1:N)
y[n] ~  bernoulli_logit( theta[j[n]] * beta[k[n]] - alpha[k[n]] );
}
'
rstan_options(auto_write = TRUE)
options(mc.cores = 3)
stan.code <- '
data {
int<lower=1> J; // number of legislators
int<lower=1> K; // number of bills
int<lower=1> N; // number of observations
int<lower=1,upper=J> j[N]; // legislator for observation n
int<lower=1,upper=K> k[N]; // bill for observation n
int<lower=0,upper=1> y[N]; // vote of observation n
}
parameters {
real alpha[K];
real beta[K];
real theta[J];
}
model {
alpha ~ normal(0, 25);
beta ~ normal(0, 25);
theta ~ normal(0, 1);
for (n in 1:N)
y[n] ~  bernoulli_logit( theta[j[n]] * beta[k[n]] - alpha[k[n]] );
}
'
J <- dim(rc$votes)[1]
K <- dim(rc$votes)[2]
N <- length(rc$votes)
j <- rep(1:J, times=K)
k <- rep(1:K, each=J)
y <- c(rc$votes)
miss <- which(is.na(y))
N <- N - length(miss)
j <- j[-miss]
k <- k[-miss]
y <- y[-miss]
stan.data <- list(J=J, K=K, N=N, j=j, k=k, y=y)
stan.fit <- stan(model_code=stan.code, data=stan.data, iter=500, warmup=200,
chains=1, thin=2)
load("lab14_stan_irt.Rdata")
traceplot(stan.fit, pars='theta', ask=TRUE)
stan.code <- '
data {
int<lower=1> J; // number of legislators
int<lower=1> K; // number of bills
int<lower=1> N; // number of observations
int<lower=1,upper=J> j[N]; // legislator for observation n
int<lower=1,upper=K> k[N]; // bill for observation n
int<lower=0,upper=1> y[N]; // vote of observation n
real party[J]; // party of legislator j (0 for D/I, 1 for R)
}
parameters {
real alpha[K];
real beta[K];
real theta[J]; # realized ideology
real gamma[J]; # unobserved, true ideology
real beta_party; # effect of party ID
}
model {
alpha ~ normal(0, 5);
beta ~ normal(0, 5);
beta_party ~ normal(0, 2);
for (i in 1:J){
theta[i] ~ normal(gamma[i], 1); # hierarchical structure for obs. ideol.
gamma[i] ~ normal(beta_party * party[i], 1); # effect of party ID
};
for (n in 1:N)
y[n] ~  bernoulli_logit( theta[j[n]] * beta[k[n]] - alpha[k[n]] );
}
'
repub <- ifelse(rc$legis.data$party=="R", 0, 1)
stan.data <- list(J=J, K=K, N=N, j=j, k=k, y=y, party=repub)
stan.fit <- stan(model_code=stan.code, data=stan.data, iter=500, warmup=200,
chains=1, thin=2)
rm(list=ls())
library(pscl)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 3)
setwd(dir="~/Dropbox/Work/Quant_AR/Q32015/Lab/Lab 10/")
load("senate_rc.rda")
rc <- dropRollCall(rc, dropList=list(codes = "notInLegis", lop = 0))
stan.code <- '
data {
int<lower=1> J; // number of legislators
int<lower=1> K; // number of bills
int<lower=1> N; // number of observations
int<lower=1,upper=J> j[N]; // legislator for observation n
int<lower=1,upper=K> k[N]; // bill for observation n
int<lower=0,upper=1> y[N]; // vote of observation n
}
parameters {
real alpha[K];
real beta[K];
real theta[J];
}
model {
alpha ~ normal(0, 25);
beta ~ normal(0, 25);
theta ~ normal(0, 1);
for (n in 1:N)
y[n] ~  bernoulli_logit( theta[j[n]] * beta[k[n]] - alpha[k[n]] );
}
'
J <- dim(rc$votes)[1]
K <- dim(rc$votes)[2]
N <- length(rc$votes)
j <- rep(1:J, times=K)
k <- rep(1:K, each=J)
y <- c(rc$votes)
miss <- which(is.na(y))
N <- N - length(miss)
j <- j[-miss]
k <- k[-miss]
y <- y[-miss]
stan.data <- list(J=J, K=K, N=N, j=j, k=k, y=y)
load("stan_irt.Rdata")
rm(list=ls())
library(caret)
# we are going to do some heavy lifting
library(foreach)
library(doParallel)
cl<-makeCluster(3)
registerDoParallel(cl)
getDoParRegistered()
getDoParWorkers()
setwd(dir="~/Dropbox/Work/Quant_AR/Q32015/Lab/Lab 10/")
load(file = "disc2012_w_order.rda")
model=as.formula(log(budget)~
CCES_region+CCES_housing+NEW_race+CCES_educ+fam_size+
log(bar_gross_income)+martial_state+ref_age*fam_size+
CCES_housing*log(bar_gross_income)+
CCES_region*log(bar_gross_income)+
fam_size*log(bar_gross_income)+
I(fam_size^2)+I(log(bar_gross_income)^2)+
I(log(bar_gross_income)^3)+msa*log(bar_gross_income))
db$bar_gross_income[which(db$bar_gross_income==0)]=NA
db=na.omit(db)
index_train=createDataPartition(y = db$budget,p = .5,list=F)
train=db[index_train,]
test=db[-index_train,]
model
fit_lasso=train(model,method = "lasso",data = train)
fit_lasso
fit_lasso=train(model,method = "lasso",data = train,
metric = "Rsquared",maximize = T,tuneLength = 10)
fit_lasso
fit_lasso
ggplot(fit_lasso) + theme(legend.position="top")
fitControl <- trainControl(method = "repeatedcv",number = 10,repeats = 3)
fit_lasso_RCV=train(model,method = "lasso",data = train,
trControl = fitControl,metric = "Rsquared",
maximize = T,tuneLength = 10)
fit_lasso_RCV
fit_lasso_RCV=train(model,method = "lasso",data = train,
trControl = fitControl,metric = "Rsquared",
maximize = T,tuneLength = 10)
results_lasso=predict(fit_lasso,newdata = test)
RMSE(results_lasso,log(test$budget))
model=as.formula(budget~CCES_housing+fam_size+bar_gross_income+ref_age+msa)
index_train=createDataPartition(y = db$budget,p = .1,list=F)
train=db[index_train,]
test=db[-index_train,]
load(file = "kernel_results.rda")
grid=expand.grid(degree=c(1,2,3),lambda=c(1,5,10,15))
grid
fit_kernelgrid=train(
model,method = "krlsPoly",data = train,tuneGrid = grid)
ggplot(fit_kernelgrid) + theme(legend.position="top")
rm(list=ls())
library(pscl)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 3)
# loading roll call data
# Source: http://jackman.stanford.edu/blog/
load("senate_rc.rda")
rc <- dropRollCall(rc, dropList=list(codes = "notInLegis", lop = 0))
stan.code <- '
data {
int<lower=1> J; // number of legislators
int<lower=1> K; // number of bills
int<lower=1> N; // number of observations
int<lower=1,upper=J> j[N]; // legislator for observation n
int<lower=1,upper=K> k[N]; // bill for observation n
int<lower=0,upper=1> y[N]; // vote of observation n
}
parameters {
real alpha[K];
real beta[K];
real theta[J];
}
model {
alpha ~ normal(0, 25);
beta ~ normal(0, 25);
theta ~ normal(0, 1);
for (n in 1:N)
y[n] ~  bernoulli_logit( theta[j[n]] * beta[k[n]] - alpha[k[n]] );
}
'
J <- dim(rc$votes)[1]
K <- dim(rc$votes)[2]
N <- length(rc$votes)
j <- rep(1:J, times=K)
k <- rep(1:K, each=J)
y <- c(rc$votes)
# deleting missing values
miss <- which(is.na(y))
N <- N - length(miss)
j <- j[-miss]
k <- k[-miss]
y <- y[-miss]
## data and initial values
stan.data <- list(J=J, K=K, N=N, j=j, k=k, y=y)
stan.code <- '
data {
int<lower=1> J; // number of legislators
int<lower=1> K; // number of bills
int<lower=1> N; // number of observations
int<lower=1,upper=J> j[N]; // legislator for observation n
int<lower=1,upper=K> k[N]; // bill for observation n
int<lower=0,upper=1> y[N]; // vote of observation n
real party[J]; // party of legislator j (0 for D/I, 1 for R)
}
parameters {
real alpha[K];
real beta[K];
real theta[J]; # realized ideology
real gamma[J]; # unobserved, true ideology
real beta_party; # effect of party ID
}
model {
alpha ~ normal(0, 5);
beta ~ normal(0, 5);
beta_party ~ normal(0, 2);
for (i in 1:J){
theta[i] ~ normal(gamma[i], 1); # hierarchical structure for obs. ideol.
gamma[i] ~ normal(beta_party * party[i], 1); # effect of party ID
};
for (n in 1:N)
y[n] ~  bernoulli_logit( theta[j[n]] * beta[k[n]] - alpha[k[n]] );
}
'
repub <- ifelse(rc$legis.data$party=="R", 0, 1)
stan.data <- list(J=J, K=K, N=N, j=j, k=k, y=y, party=repub)
stan.fit <- stan(model_code=stan.code, data=stan.data, iter=500, warmup=200,
chains=1, thin=2)
monitor(stan.fit)
